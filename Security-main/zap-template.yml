parameters:
  - name: targetUrls
    type: string
  - name: appName
    type: string
  - name: scanType
    type: string
  - name: reportTemplate
    type: string

steps:
  - script: |
      echo "=== DEBUG: Parameter Values ==="
      echo "targetUrls parameter: '${{ parameters.targetUrls }}'"
      echo "appName parameter: '${{ parameters.appName }}'"
      echo "scanType parameter: '${{ parameters.scanType }}'"
      echo "reportTemplate parameter: '${{ parameters.reportTemplate }}'"
      echo "================================"
      
      echo "Starting ZAP Scan for ${{ parameters.appName }}..."
      echo "Target URLs: ${{ parameters.targetUrls }}"
      
      # Check if targetUrls is empty
      if [ -z "${{ parameters.targetUrls }}" ]; then
        echo "ERROR: targetUrls parameter is empty!"
        exit 1
      fi
      
      ARTIFACT_DIR="$(Build.ArtifactStagingDirectory)/zap-reports"
      mkdir -p $ARTIFACT_DIR
      cd $ARTIFACT_DIR
      AUTOMATION_FILE="automation.yaml"

      # ========================================================================
      # ZAP Automation Framework config
      # ========================================================================
      cat <<EOF > $AUTOMATION_FILE
      env:
        contexts:
          - name: '${{ parameters.appName }}'
            urls:
      EOF

      echo "=== DEBUG: Processing URLs ==="
      IFS=',' read -ra urls <<< "${{ parameters.targetUrls }}"
      echo "Number of URLs found: ${#urls[@]}"
      
      url_count=0
      for url in "${urls[@]}"; do
        url=$(echo "$url" | xargs)
        echo "Processing URL $((url_count+1)): '$url'"
        if [ -n "$url" ] && [[ "$url" =~ ^https?:// ]]; then
          echo "            - '$url'" >> $AUTOMATION_FILE
          echo "  ✓ Added: $url"
          ((url_count++))
        else
          echo "  ✗ Skipped (invalid): $url"
        fi
      done
      
      echo "Total valid URLs added: $url_count"
      
      if [ $url_count -eq 0 ]; then
        echo "ERROR: No valid URLs were processed!"
        exit 1
      fi

      cat <<EOF >> $AUTOMATION_FILE
            authentication:
              method: manual
            users:
              - name: 'ci-user'
                credentials:
                  session: '/zap/wrk/session.json'
        parameters:
          failOnError: true
          failOnWarning: false
          progressToStdout: true
      jobs:
      EOF

      if [ "${{ parameters.scanType }}" == "baseline" ]; then
        cat <<EOF >> $AUTOMATION_FILE
        - type: spider
          parameters:
            context: '${{ parameters.appName }}'
            user: 'ci-user'
            maxDuration: 5
        - type: passiveScan-wait
      EOF
      else
        cat <<EOF >> $AUTOMATION_FILE
        - type: spider
          parameters:
            context: '${{ parameters.appName }}'
            user: 'ci-user'
        - type: passiveScan-wait
        - type: activeScan
          parameters:
            context: '${{ parameters.appName }}'
            user: 'ci-user'
      EOF
      fi

      cat <<EOF >> $AUTOMATION_FILE
        - type: report
          parameters:
            template: 'traditional-json'
            reportDir: '/zap/wrk/'
            reportFile: 'zap_report_${{ parameters.appName }}_${{ parameters.scanType }}.json'
      EOF

      if [ "${{ parameters.reportTemplate }}" != "traditional-json" ]; then
        cat <<EOF >> $AUTOMATION_FILE
        - type: report
          parameters:
            template: '${{ parameters.reportTemplate }}'
            reportDir: '/zap/wrk/'
            reportFile: 'zap_report_${{ parameters.appName }}_${{ parameters.scanType }}'
      EOF
      fi

      echo "=== Generated Automation Plan ==="
      cat $AUTOMATION_FILE
      echo "================================="

      if [ "${{ parameters.appName }}" == "admin" ]; then
        cp $(Pipeline.Workspace)/PlaywrightSessionAdmin/admin-session.json session.json
      else
        cp $(Pipeline.Workspace)/PlaywrightSessionAgent/agent-session.json session.json
      fi

      echo "=== Session file check ==="
      if [ -f "session.json" ]; then
        echo "✓ Session file exists"
        echo "Session file size: $(stat -c%s session.json) bytes"
      else
        echo "✗ Session file missing!"
      fi

      docker run --rm \
        -v $(pwd):/zap/wrk/:rw \
        --user root \
        ghcr.io/zaproxy/zaproxy:stable \
        zap.sh -cmd \
        -addonupdate \
        -addoninstall reports \
        -autorun /zap/wrk/$AUTOMATION_FILE

      echo "ZAP scan finished."
      ls -la
    displayName: "Run ZAP Scan with Auth (Debug)"

  - publish: '$(Build.ArtifactStagingDirectory)/zap-reports'
    artifact: 'ZAP_Reports_${{ parameters.appName }}'
    displayName: 'Publish ZAP Scan Reports'