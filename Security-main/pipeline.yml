trigger:
- none

parameters:
- name: environment
  displayName: Environment
  type: string
  default: 'qa'
  values:
  - 'qa'
  - 'uat'

- name: scanType
  displayName: Type of ZAP scan
  type: string
  default: 'baseline'
  values:
  - 'baseline'
  - 'full'

- name: reportTemplate
  displayName: ZAP Report Template
  type: string
  default: 'traditional-html'
  values:
  - traditional-html
  - traditional-json
  - sarif-json
  - traditional-pdf

variables:
  # Base URLs for each environment
  dev_admin_base: 'https://dev.app-np.neovance.com'
  dev_agent_base: 'https://dev-agent.app-np.neovance.com'
  qa_admin_base: 'https://qa.app-np.neovance.com'
  qa_agent_base: 'https://qa-agent.app-np.neovance.com'
  uat_admin_base: 'https://uat.app-np.neovance.com'
  uat_agent_base: 'https://uat-agent.app-np.neovance.com'

  # Common URL paths
  admin_paths: >
    /clients,
    /user-management/permission-sets,
    /entity-manager,
    /hcp-portal,
    /case-mapping,
    /correspondence/placeholders,
    /correspondence/static-documents,
    /correspondence/document-management,
    /correspondence/template-management,
    /correspondence/send-manual-communication,
    /correspondence/correspondence-logs,
    /sla-management,
    /consent-configuration,
    /profile-details

  agent_paths: >
    /dashboard,
    /entities/,
    /my-cases/,
    /my-tasks/,
    /manage-queue/dynamic-queue/,
    /correspondence/correspondence-logs/outbound/,
    /interaction,
    /permission-assignment

stages:
- stage: Auth_Login
  displayName: "Authenticate via Playwright"
  jobs:
  - job: PlaywrightLoginAdmin
    displayName: "Run Playwright login and save session (Admin)"
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: UseNode@1
      inputs:
        version: '18.x'
    - script: |
        npm install -D @playwright/test
        npx playwright install --with-deps
        mkdir -p $(Build.ArtifactStagingDirectory)/auth

        # Pick environment-specific values
        if [ "$ENVIRONMENT" = "dev" ]; then
          BASE_URL=$dev_admin_base
          EMAIL=$dev_ADMIN_EMAIL
          PASSWORD=$dev_ADMIN_PASSWORD
          MFA_SECRET=$dev_ADMIN_MFA_SECRET
        elif [ "$ENVIRONMENT" = "qa" ]; then
          BASE_URL=$qa_admin_base
          EMAIL=$qa_ADMIN_EMAIL
          PASSWORD=$qa_ADMIN_PASSWORD
          MFA_SECRET=$qa_ADMIN_MFA_SECRET
        else
          BASE_URL=$uat_admin_base
          EMAIL=$uat_ADMIN_EMAIL
          PASSWORD=$uat_ADMIN_PASSWORD
          MFA_SECRET=$uat_ADMIN_MFA_SECRET
        fi

        node playwright-login.js \
          --url "$BASE_URL" \
          --email "$EMAIL" \
          --password "$PASSWORD" \
          --mfaSecret "$MFA_SECRET" \
          --output "$(Build.ArtifactStagingDirectory)/auth/admin-session.json"
      env:
        ENVIRONMENT: ${{ parameters.environment }}
        dev_admin_base: $(dev_admin_base)
        qa_admin_base: $(qa_admin_base)
        uat_admin_base: $(uat_admin_base)
        dev_ADMIN_EMAIL: $(dev_ADMIN_EMAIL)
        dev_ADMIN_PASSWORD: $(dev_ADMIN_PASSWORD)
        dev_ADMIN_MFA_SECRET: $(dev_ADMIN_MFA_SECRET)
        qa_ADMIN_EMAIL: $(qa_ADMIN_EMAIL)
        qa_ADMIN_PASSWORD: $(qa_ADMIN_PASSWORD)
        qa_ADMIN_MFA_SECRET: $(qa_ADMIN_MFA_SECRET)
        uat_ADMIN_EMAIL: $(uat_ADMIN_EMAIL)
        uat_ADMIN_PASSWORD: $(uat_ADMIN_PASSWORD)
        uat_ADMIN_MFA_SECRET: $(uat_ADMIN_MFA_SECRET)
      displayName: "Run Playwright login (Admin)"
    - publish: '$(Build.ArtifactStagingDirectory)/auth/admin-session.json'
      artifact: 'PlaywrightSessionAdmin'
      displayName: 'Publish Admin session.json'

  - job: PlaywrightLoginAgent
    displayName: "Run Playwright login and save session (Agent)"
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: UseNode@1
      inputs:
        version: '18.x'
    - script: |
        npm install -D @playwright/test
        npx playwright install --with-deps
        mkdir -p $(Build.ArtifactStagingDirectory)/auth

        if [ "$ENVIRONMENT" = "dev" ]; then
          BASE_URL=$dev_agent_base
          EMAIL=$dev_AGENT_EMAIL
          PASSWORD=$dev_AGENT_PASSWORD
          MFA_SECRET=$dev_AGENT_MFA_SECRET
        elif [ "$ENVIRONMENT" = "qa" ]; then
          BASE_URL=$qa_agent_base
          EMAIL=$qa_AGENT_EMAIL
          PASSWORD=$qa_AGENT_PASSWORD
          MFA_SECRET=$qa_AGENT_MFA_SECRET
        else
          BASE_URL=$uat_agent_base
          EMAIL=$uat_AGENT_EMAIL
          PASSWORD=$uat_AGENT_PASSWORD
          MFA_SECRET=$uat_AGENT_MFA_SECRET
        fi

        node playwright-login.js \
          --url "$BASE_URL" \
          --email "$EMAIL" \
          --password "$PASSWORD" \
          --mfaSecret "$MFA_SECRET" \
          --output "$(Build.ArtifactStagingDirectory)/auth/agent-session.json"
      env:
        ENVIRONMENT: ${{ parameters.environment }}
        dev_agent_base: $(dev_agent_base)
        qa_agent_base: $(qa_agent_base)
        uat_agent_base: $(uat_agent_base)
        dev_AGENT_EMAIL: $(dev_AGENT_EMAIL)
        dev_AGENT_PASSWORD: $(dev_AGENT_PASSWORD)
        dev_AGENT_MFA_SECRET: $(dev_AGENT_MFA_SECRET)
        qa_AGENT_EMAIL: $(qa_AGENT_EMAIL)
        qa_AGENT_PASSWORD: $(qa_AGENT_PASSWORD)
        qa_AGENT_MFA_SECRET: $(qa_AGENT_MFA_SECRET)
        uat_AGENT_EMAIL: $(uat_AGENT_EMAIL)
        uat_AGENT_PASSWORD: $(uat_AGENT_PASSWORD)
        uat_AGENT_MFA_SECRET: $(uat_AGENT_MFA_SECRET)
      displayName: "Run Playwright login (Agent)"
    - publish: '$(Build.ArtifactStagingDirectory)/auth/agent-session.json'
      artifact: 'PlaywrightSessionAgent'
      displayName: 'Publish Agent session.json'

- stage: ZAP_Scan_Stage
  displayName: "Run ZAP Scan"
  dependsOn: Auth_Login
  jobs:
  - job: AdminScan
    displayName: "ZAP Scan - Admin"
    pool:
      vmImage: 'ubuntu-latest'
    variables:
      baseUrl: $[ variables['${{ parameters.environment }}_admin_base'] ]
      paths: $(admin_paths)
    steps:
    - download: current
      artifact: PlaywrightSessionAdmin

    - powershell: |
        Write-Host "=== DEBUG: Variable Resolution ==="
        Write-Host "Environment parameter: ${{ parameters.environment }}"
        Write-Host "Base URL: $env:baseUrl"
        Write-Host "Admin paths: $env:paths"
        Write-Host "================================="
        
        $baseUrl = $env:baseUrl
        $paths = $env:paths
        
        $pathArray = $paths -split ','
        $fullUrls = @()
        
        Write-Host "Number of paths found: $($pathArray.Count)"
        
        foreach ($path in $pathArray) {
            $trimmedPath = $path.Trim()
            Write-Host "Processing path: '$trimmedPath'"
            if ($trimmedPath -ne "") {
                $fullUrl = $baseUrl + $trimmedPath
                $fullUrls += $fullUrl
                Write-Host "  Added: $fullUrl"
            }
        }
        
        $fullUrlsString = $fullUrls -join ','
        Write-Host "=== FINAL RESULT ==="
        Write-Host "ADMIN_URLS=$fullUrlsString"
        Write-Host "===================="
        
        if ([string]::IsNullOrEmpty($fullUrlsString)) {
            Write-Error "ERROR: No URLs were generated!"
            exit 1
        }
        
        Write-Host "##vso[task.setvariable variable=ADMIN_URLS;isOutput=true]$fullUrlsString"
      env:
        baseUrl: $(baseUrl)
        paths: $(paths)
      name: SetAdminUrls
      displayName: "Build Admin URLs"
    
    - powershell: |
        Write-Host "=== VERIFICATION STEP ==="
        Write-Host "ADMIN_URLS variable: $(SetAdminUrls.ADMIN_URLS)"
        Write-Host "========================="
      displayName: "Verify URLs Variable"
    
    - template: zap-template.yml
      parameters:
        targetUrls: '$(SetAdminUrls.ADMIN_URLS)'
        appName: 'admin'
        scanType: ${{ parameters.scanType }}
        reportTemplate: ${{ parameters.reportTemplate }}

  - job: AgentScan
    displayName: "ZAP Scan - Agent"
    pool:
      vmImage: 'ubuntu-latest'
    variables:
      baseUrl: $[ variables['${{ parameters.environment }}_agent_base'] ]
      paths: $(agent_paths)
    steps:
    - download: current
      artifact: PlaywrightSessionAgent
    
    - powershell: |
        Write-Host "=== DEBUG: Variable Resolution ==="
        Write-Host "Environment parameter: ${{ parameters.environment }}"
        Write-Host "Base URL: $env:baseUrl"
        Write-Host "Agent paths: $env:paths"
        Write-Host "================================="
        
        $baseUrl = $env:baseUrl
        $paths = $env:paths
        
        $pathArray = $paths -split ','
        $fullUrls = @()
        
        Write-Host "Number of paths found: $($pathArray.Count)"
        
        foreach ($path in $pathArray) {
            $trimmedPath = $path.Trim()
            Write-Host "Processing path: '$trimmedPath'"
            if ($trimmedPath -ne "") {
                $fullUrl = $baseUrl + $trimmedPath
                $fullUrls += $fullUrl
                Write-Host "  Added: $fullUrl"
            }
        }
        
        $fullUrlsString = $fullUrls -join ','
        Write-Host "=== FINAL RESULT ==="
        Write-Host "AGENT_URLS=$fullUrlsString"
        Write-Host "===================="
        
        if ([string]::IsNullOrEmpty($fullUrlsString)) {
            Write-Error "ERROR: No URLs were generated!"
            exit 1
        }
        
        Write-Host "##vso[task.setvariable variable=AGENT_URLS;isOutput=true]$fullUrlsString"
      env:
        baseUrl: $(baseUrl)
        paths: $(paths)
      name: SetAgentUrls
      displayName: "Build Agent URLs"
    
    - powershell: |
        Write-Host "=== VERIFICATION STEP ==="
        Write-Host "AGENT_URLS variable: $(SetAgentUrls.AGENT_URLS)"
        Write-Host "========================="
      displayName: "Verify URLs Variable"
    
    - template: zap-template.yml
      parameters:
        targetUrls: '$(SetAgentUrls.AGENT_URLS)'
        appName: 'agent'
        scanType: ${{ parameters.scanType }}
        reportTemplate: ${{ parameters.reportTemplate }}