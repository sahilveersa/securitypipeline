trigger:
- none

parameters:
- name: environment
  displayName: Environment
  type: string
  default: 'qa'
  values:
  - 'dev'
  - 'qa'
  - 'uat'

- name: scanType
  displayName: Type of ZAP scan
  type: string
  default: 'baseline'
  values:
  - 'baseline'
  - 'full'

- name: reportTemplate
  displayName: ZAP Report Template
  type: string
  default: 'traditional-html'
  values:
  - traditional-html
  - traditional-json
  - sarif-json
  - traditional-pdf

variables:
  # Base URLs for each environment
  dev_admin_base: 'https://dev.app-np.neovance.com'
  dev_agent_base: 'https://dev-agent.app-np.neovance.com'
  qa_admin_base: 'https://qa.app-np.neovance.com'
  qa_agent_base: 'https://qa-agent.app-np.neovance.com'
  uat_admin_base: 'https://uat.app-np.neovance.com'
  uat_agent_base: 'https://uat-agent.app-np.neovance.com'

  # Common URL paths
  admin_paths: >
    /clients,
    /user-management/permission-sets,
    /entity-manager,
    /hcp-portal,
    /case-mapping,
    /correspondence/placeholders,
    /correspondence/static-documents,
    /correspondence/document-management,
    /correspondence/template-management,
    /correspondence/send-manual-communication,
    /correspondence/correspondence-logs,
    /sla-management,
    /consent-configuration,
    /profile-details

  agent_paths: >
    /dashboard,
    /entities/2144,
    /my-cases/32/1395/36,
    /my-tasks/1127/1318/37,
    /manage-queue/dynamic-queue/32/1394/207,
    /manage-queue/dynamic-queue/32/1394/2,
    /correspondence/correspondence-logs/outbound/3607,
    /interaction,
    /permission-assignment

stages:
- stage: Auth_Login
  displayName: "Authenticate via Playwright"
  jobs:
  - job: PlaywrightLoginAdmin
    displayName: "Run Playwright login and save session (Admin)"
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: UseNode@1
      inputs:
        version: '18.x'
    - script: |
        npm install -D @playwright/test
        npx playwright install --with-deps
        mkdir -p $(Build.ArtifactStagingDirectory)/auth
        
        # Set environment variables based on selected environment
        ENV_NAME="$ENVIRONMENT"
        ADMIN_EMAIL="$${ENV_NAME}_ADMIN_EMAIL"
        ADMIN_PASSWORD="$${ENV_NAME}_ADMIN_PASSWORD"
        ADMIN_MFA_SECRET="$${ENV_NAME}_ADMIN_MFA_SECRET"
        BASE_URL="$${ENV_NAME}_admin_base"
        
        node playwright-login.js \
          --url "$(eval echo \$$BASE_URL)" \
          --email "$(eval echo \$$ADMIN_EMAIL)" \
          --password "$(eval echo \$$ADMIN_PASSWORD)" \
          --mfaSecret "$(eval echo \$$ADMIN_MFA_SECRET)" \
          --output "$(Build.ArtifactStagingDirectory)/auth/admin-session.json"
      env:
        ENVIRONMENT: ${{ parameters.environment }}
      displayName: "Run Playwright login (Admin)"
    - publish: '$(Build.ArtifactStagingDirectory)/auth/admin-session.json'
      artifact: 'PlaywrightSessionAdmin'
      displayName: 'Publish Admin session.json'

  - job: PlaywrightLoginAgent
    displayName: "Run Playwright login and save session (Agent)"
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: UseNode@1
      inputs:
        version: '18.x'
    - script: |
        npm install -D @playwright/test
        npx playwright install --with-deps
        mkdir -p $(Build.ArtifactStagingDirectory)/auth
        
        # Set environment variables based on selected environment
        ENV_NAME="$ENVIRONMENT"
        AGENT_EMAIL="$${ENV_NAME}_AGENT_EMAIL"
        AGENT_PASSWORD="$${ENV_NAME}_AGENT_PASSWORD"
        AGENT_MFA_SECRET="$${ENV_NAME}_AGENT_MFA_SECRET"
        BASE_URL="$${ENV_NAME}_agent_base"
        
        node playwright-login.js \
          --url "$(eval echo \$$BASE_URL)" \
          --email "$(eval echo \$$AGENT_EMAIL)" \
          --password "$(eval echo \$$AGENT_PASSWORD)" \
          --mfaSecret "$(eval echo \$$AGENT_MFA_SECRET)" \
          --output "$(Build.ArtifactStagingDirectory)/auth/agent-session.json"
      env:
        ENVIRONMENT: ${{ parameters.environment }}
      displayName: "Run Playwright login (Agent)"
    - publish: '$(Build.ArtifactStagingDirectory)/auth/agent-session.json'
      artifact: 'PlaywrightSessionAgent'
      displayName: 'Publish Agent session.json'

- stage: ZAP_Scan_Stage
  displayName: "Run ZAP Scan"
  dependsOn: Auth_Login
  jobs:
  - job: AdminScan
    displayName: "ZAP Scan - Admin"
    variables:
      baseUrl: $(${{ parameters.environment }}_admin_base)
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - download: current
      artifact: PlaywrightSessionAdmin
    - bash: |
        # Combine base URL with paths
        FULL_URLS=$(echo "$(admin_paths)" | tr ',' '\n' | sed 's/^[ \t]*//' | sed "s|^|$(baseUrl)|" | tr '\n' ',' | sed 's/,$//')
      name: SetUrls
    - template: zap-template.yml
      parameters:
        targetUrls: $(SetUrls.FULL_URLS)
        appName: 'admin'
        scanType: ${{ parameters.scanType }}
        reportTemplate: ${{ parameters.reportTemplate }}

  - job: AgentScan
    displayName: "ZAP Scan - Agent"
    variables:
      baseUrl: $(${{ parameters.environment }}_agent_base)
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - download: current
      artifact: PlaywrightSessionAgent
    - bash: |
        # Combine base URL with paths
        FULL_URLS=$(echo "$(agent_paths)" | tr ',' '\n' | sed 's/^[ \t]*//' | sed "s|^|$(baseUrl)|" | tr '\n' ',' | sed 's/,$//')
      name: SetUrls
    - template: zap-template.yml
      parameters:
        targetUrls: $(SetUrls.FULL_URLS)
        appName: 'agent'
        scanType: ${{ parameters.scanType }}
        reportTemplate: ${{ parameters.reportTemplate }}